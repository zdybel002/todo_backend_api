package ru.javabegin.backend.todo.todobackend.controller;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.javabegin.backend.todo.todobackend.entity.Priority;
import ru.javabegin.backend.todo.todobackend.search.PrioritySearchValues;
import ru.javabegin.backend.todo.todobackend.service.PriorityService;


import java.util.List;
import java.util.NoSuchElementException;





@RestController
@RequestMapping("/priority") // base URI
public class PriorityController {

    // access to DB data
    private PriorityService priorityService;

    // constructor-based dependency injection
    // we do not use @Autowired on the field because "Field injection is not recommended"
    public PriorityController(PriorityService priorityService) {
        this.priorityService = priorityService;
    }


    @PostMapping("/all")
    public List<Priority> findAll(@RequestBody String email) {
        return priorityService.findAll(email);
    }


    @PostMapping("/add")
    public ResponseEntity<Priority> add(@RequestBody Priority priority) {

        // check required parameters
        if (priority.getId() != null && priority.getId() != 0) {
            // id is autogenerated in DB (autoincrement), so it should not be passed, otherwise unique constraint conflicts may occur
            return new ResponseEntity("redundant param: id MUST be null", HttpStatus.NOT_ACCEPTABLE);
        }

        // if title is empty
        if (priority.getTitle() == null || priority.getTitle().trim().length() == 0) {
            return new ResponseEntity("missed param: title", HttpStatus.NOT_ACCEPTABLE);
        }

        // if color is empty
        if (priority.getColor() == null || priority.getColor().trim().length() == 0) {
            return new ResponseEntity("missed param: color", HttpStatus.NOT_ACCEPTABLE);
        }

        // save works for both create and update
        return ResponseEntity.ok(priorityService.add(priority));
    }


    @PutMapping("/update")
    public ResponseEntity update(@RequestBody Priority priority) {

        // check required parameters
        if (priority.getId() == null || priority.getId() == 0) {
            return new ResponseEntity("missed param: id", HttpStatus.NOT_ACCEPTABLE);
        }

        // if title is empty
        if (priority.getTitle() == null || priority.getTitle().trim().length() == 0) {
            return new ResponseEntity("missed param: title", HttpStatus.NOT_ACCEPTABLE);
        }

        // if color is empty
        if (priority.getColor() == null || priority.getColor().trim().length() == 0) {
            return new ResponseEntity("missed param: color", HttpStatus.NOT_ACCEPTABLE);
        }

        // save works for both create and update
        priorityService.update(priority);

        return new ResponseEntity(HttpStatus.OK); // just return status 200 (operation successful)
    }

    // id parameter is passed not in the request body, but in the URL
    @PostMapping("/id")
    public ResponseEntity<Priority> findById(@RequestBody Long id) {

        Priority priority = null;

        // you can avoid try-catch and get full stacktrace on error
        // here is an example of handling the exception and sending a custom message/status
        try {
            priority = priorityService.findById(id);
        } catch (NoSuchElementException e) { // if the object is not found
            e.printStackTrace();
            return new ResponseEntity("id=" + id + " not found", HttpStatus.NOT_ACCEPTABLE);
        }

        return ResponseEntity.ok(priority);
    }


    // for deletion we use DELETE mapping with id in the URL path variable
    @DeleteMapping("/delete/{id}")
    public ResponseEntity delete(@PathVariable("id") Long id) {

        // you can avoid try-catch and get full stacktrace on error
        // here is an example of handling the exception and sending a custom message/status
        try {
            priorityService.deleteById(id);
        } catch (EmptyResultDataAccessException e) {
            e.printStackTrace();
            return new ResponseEntity("id=" + id + " not found", HttpStatus.NOT_ACCEPTABLE);
        }

        return new ResponseEntity(HttpStatus.OK); // just return status 200 (operation successful)
    }


    // search by any parameters in PrioritySearchValues
    @PostMapping("/search")
    public ResponseEntity<List<Priority>> search(@RequestBody PrioritySearchValues prioritySearchValues) {

        // check required parameters
        if (prioritySearchValues.getEmail() == null || prioritySearchValues.getEmail().trim().length() == 0) {
            return new ResponseEntity("missed param: email", HttpStatus.NOT_ACCEPTABLE);
        }

        // if title is empty or null â€” all categories will be returned
        return ResponseEntity.ok(priorityService.find(prioritySearchValues.getTitle(), prioritySearchValues.getEmail()));
    }

}
